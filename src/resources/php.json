{
  items : [
    {
      /**
       * Group used to check insertion position
       * If you do not provide group name shortcut value will be used
       *
       */
      group: '',

      /**
       * Can`t be empty
       * MUST be simple and intuitive
       *
       * example: &
       * example: thr
       */
      shortcut: '',

      /**
       * Replace shortcut to this string
       */
      expand: 'throw new \Exception()',

      /**
       * Replace before paste
       *
       */
      replaceRegex: {},

      /**
       * Check if shortcut is regex
       * Default value is false
       */
      isRegex: false,
      /**
       * Tabs configuration
       * Detect in what tab you need to insert other part of code
       *
       */
      tabs: {

      },
      /**
       * Variables definition
       * You can set default value, expression
       */
      vars : {

      },
      /**
       * According to this regexp you can use different shortcuts in different files
       *
       */
      fileRegexp : ''
    },
    {
      /**
       * Type cast.
       */
      group: 'cast',
      shortcut: ':(s|a|i|o)',
      expand: '($1) ',
      isRegex: true,
      regexpReplaces: {
        's': 'string',
        'a': 'array',
        'i': 'int',
        'o': 'object'
      }
    },
    {
      group: 'class_fields',
      shortcut: '(pub|pro|pri)(s)?(\\$n|\\$s|\\$a|\\$f|\\$t)',
      expand: '$1 $2 $$TAB1$ = $3;\n',
      isRegex: true,
      regexpReplaces: {
        'pub': 'public',
        'pro': 'protected',
        'pri': 'private',
        's': 'static',
        '$a': '[]',
        '$n': 'null',
        '$s': '\'\'',
        '$f': 'false',
        '$t': 'true'
      }
    },

    {
      /**
       * Variable
       */
      shortcut: '$',
      expand: '$'
    },
    {
      group: 'logical_operators',
      shortcut: '(\\||\&)',
      isRegex: true,
      expand: ' $1 $TAB1$',
      regexpReplaces: {
        '&': 'and',
        '|': 'or'
      },
      tabs: {
        TAB1: [ 'variable_handling', 'preg_match_fn' ]
      }
    },
    {
      group: 'control_structure',
      shortcut: '(co|br|rf|ra|rt|rn|rs|r\\$|r)',
      expand: '$1;',
      isRegex: true,
      regexpReplaces: {
        'co': 'continue',
        'br': 'break',
        'r$': 'return \\$this',
        'ra': 'return array()',
        'rs': 'return ""',
        'rf': 'return false',
        'rt': 'return true',
        'rn': 'return null',
        'r': 'return '
      }
    },

    {
      group: 'if',
      shortcut: '(eli|if)',
      expand: ' $1($TAB1$){$TAB2$}',
      isRegex: true,
      regexpReplaces: {
        'eli': 'elseif'
      },
      tabs: {
        END: [ 'class_method', 'if' ],
        TAB1: [  'variable_handling', 'preg_match_fn', 'logical_operators' ],
        TAB2: []
      }
    },
    {
      group: 'variable_handling',
      shortcut: '(\!)?(iso|isf|isd|isa|isi|isn|isc|iss|in|i|e)',
      expand: ' $1$2($TAB1$) $TAB2$',
      isRegex: true,
      tabs: {
        TAB2: [ 'variable_handling', 'logical_operators' ]
      },
      regexpReplaces: {
        'iso': 'is_object',
        'isf': 'is_file',
        'isd': 'is_dir',
        'isa': 'is_array',
        'isc': 'is_callable',
        'isi': 'is_integer',
        'isn': 'is_null',
        'iss': 'is_string',
        'in' : 'in_array',
        'i': 'isset',
        'e': 'empty'
      }
    },
    {
      group: 'preg_match_fn',
      shortcut: '(prma|prm)',
      expand: '$1(\'!$VAR_REGEXP$!\', $VAR_SUBJECT$, $VAR_MATCHED$)',
      isRegex: true,
      regexpReplaces: {
        'prma':'preg_match_all',
        'prm':'preg_match'
      },
      vars : {
          VAR_SUBJECT: {
            expression : "complete()",
            alwaysStopAt : true
          },
          VAR_MATCHED: {
            defaultValue : '"$matchedData"',
            alwaysStopAt : true
          }
        }
    },
    {
      group: 'preg_replace_callback_fn',
      shortcut: 'prrc',
      expand: '$VAR_SUBJECT$ = preg_replace_callback(\'!$VAR_REGEXP$!\', function($matches){\n$VAR_TO$\n} ,$VAR_SUBJECT$)',
      vars : {
          VAR_REGEXP :{
            alwaysStopAt : true
          },
          VAR_SUBJECT: {
            expression : "complete()",
            alwaysStopAt : true
          },
          VAR_TO: {
            defaultValue: '"return $matches[0];"',
            alwaysStopAt : true
          }
        }
    },

    {
      group: 'preg_replace_fn',
      shortcut: 'prr',
      expand: '$VAR_SUBJECT$ = preg_replace(\'!$VAR_REGEXP$!\', $VAR_TO$ ,$VAR_SUBJECT$)',
      vars : {
          VAR_REGEXP :{
            alwaysStopAt : true
          },
          VAR_SUBJECT: {
            expression : "complete()",
            alwaysStopAt : true
          },
          VAR_TO: {
            defaultValue : '"\'\'"',
            alwaysStopAt : true
          }
        }
    },
    
    {
      group: 'variable_handling',
      shortcut: 'c([!=<>0-9]*)',
      expand: ' count($TAB1$)$1',
      tabs: {
        TAB2: [ 'variable_handling' ]
      },
      isRegex: true,
      regexpReplaces: {
        'e': '=',
        'n': '!='
      }
    },
    {
      shortcut: 'fork',
      expand: 'foreach($$VAR_ARRAY$ as $VAR_KEY$=>$VAR_VALUE$){\n$TAB4$\n}',
      tabs: {
        TAB4: []
      },
      vars : {
        VAR_ARRAY: {
          expression : "complete()",
          alwaysStopAt : true
        },
        VAR_KEY: {
          defaultValue : '"$key"',
          alwaysStopAt : true
        },
        VAR_VALUE: {
          defaultValue : '"$value"',
          alwaysStopAt : true
        }
      }
    },
    {
      shortcut: 'for',
      expand: 'foreach ($VAR_ARRAY$ as $VAR_VARIABLE$){\n$TAB1$\n}\n',
      vars : {
          VAR_ARRAY : {
            expression : "complete()",
            alwaysStopAt : true
          },
          VAR_VARIABLE: {
            defaultValue : '"$value"',
            alwaysStopAt : true
          }
      },
      tabs: {
        TAB1: []
      }
    },
    {
      shortcut: 'thr(i|)',
      expand: ' throw new \\$1Exception("$TAB1$");\n',
      isRegex: true,
      regexpReplaces: {
        'i': 'InvalidArgument'
      }
    },
    {
      group: 'class_method',
      shortcut: '(pub|pro|pri)a',
      expand: '$1 abstract function $TAB1$($TAB2$);',
      isRegex: true,
      regexpReplaces: {
        'pub': 'public',
        'pro': 'protected',
        'pri': 'private',
        'f': 'final'
      }
    },
    {
      /**
       * Merge several shortcuts combinations
       */
      group: 'class_method',
      shortcut: '(pub|pro|pri)(s|f|sf)?',
      expand: '$1 $2 function $TAB1$($TAB2$){\n$TAB3$\n}',
      isRegex: true,
      regexpReplaces: {
        'pub': 'public',
        'pro': 'protected',
        'pri': 'private',
        's': 'static',
        'f': 'final'
      },
      tabs: {
        END: [ 'class_method' ],
        TAB3: []
      }
    }
    ,
    {
      group: ':iterator',
      shortcut: 'do',
      expand: 'do{\n$TAB1$\n}while($TAB2$);\n',
      tabs: {
        END: [ 'class_method' ],
        TAB2: [  'variable_handling', 'logical_operators' ],
        TAB1: [ ]
      }
    }
    ,
    {
      group: ':function',
      shortcut: 'fn',
      expand: 'function($TAB1$){\n$TAB2$\n}',
      tabs: {
        END: [ 'class_method' ],
        TAB2: [ ]
      }
    }
    ,
    {
      group: ':iterator',
      shortcut: 'while',
      expand: 'while($TAB1$){$TAB2$};\n',
      tabs: {
        END: [ 'class_method' ],
        TAB1: [  'variable_handling', 'logical_operators' ],
        TAB2: [ ]
      }
    }
    ,
    {
      group: ':debug_print',
      shortcut: '=(s|a)(d|)',
      isRegex: true,
      expand: 'echo "\\n***".__LINE__."***\\n<pre>".print_r($1$TAB1$, true)."</pre>\\n";$2',
      tabs: {
        TAB1: [ ]
      },
      regexpReplaces: {
        'd': 'die();',
        's': '(string)',
        'a': ' '
      }
    }
    ,
    {
      group: ':class_method',
      shortcut: '__a',
      expand: 'public function append$VAR_METHOD$($$VAR_FIELD$){\n $this->$VAR_FIELD$[] = $$VAR_FIELD$; }\n',
      vars : {
        VAR_FIELD : {
          expression : "decapitalize(VAR_METHOD)"
        }
      }
     }
  ]
}
